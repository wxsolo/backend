// Generated by CoffeeScript 1.6.3
var ObjectID, ParseDate, Post, getTime, mongoose, parseTag, postSchema;

mongoose = require('../lib/mongoose');

ObjectID = require("mongodb").ObjectID;

ParseDate = require('../middlewares/timeparse');

postSchema = new mongoose.Schema({
  author: String,
  title: String,
  tags: Array,
  post: String,
  categories: String,
  date: Date,
  time: {
    date: String,
    year: String,
    month: String,
    day: String,
    minutes: String,
    seconds: String
  },
  pv: Number
});

module.exports = Post = mongoose.model('Post', postSchema);

Post.getTotal = function(args, next) {
  return Post.find(args.condition).count().exec(next);
};

Post.getPosts = function(args, next) {
  return Post.find(args.condition).skip((args.page - 1) * args.pageSize).limit(args.pageSize).sort('-date').exec(next);
};

Post.getPostById = function(id, next) {
  return Post.findOne({
    _id: new ObjectID(id)
  }).exec(function(err, post) {
    if (post != null) {
      return next(null, post);
    } else {
      return next(err, null);
    }
  });
};

Post.getRecents = function(args, next) {
  return Post.getPosts(args, next);
};

Post.getPostByWidgets = function(args, next) {
  return Post.getPosts(args, next);
};

Post.modify = function(args, author, next) {
  return Post.findOne({
    _id: ObjectID(args.id)
  }).exec(function(err, post) {
    try {
      post.time = getTime();
      post.tags = args.tags;
      post.post = args.post;
      post.title = args.title;
      post.date = new Date();
      post.save();
      return next(null, post);
    } catch (_error) {
      err = _error;
      return next(err, null);
    }
  });
};

Post.add = function(args, author, next) {
  var err, post;
  post = new Post;
  try {
    post.author = author;
    post.title = args.title;
    post.pv = 0;
    post.categories = args.categories;
    post.tags = args.tags;
    post.post = args.post;
    post.time = getTime();
    post.date = new Date();
    post.save();
    return next(null, post);
  } catch (_error) {
    err = _error;
    return next(err, null);
  }
};

Post.remove = function(id, next) {
  return Post.findOne({
    _id: new ObjectID(id)
  }).exec(function(err, post) {
    if (err) {
      return next(err, null);
    } else {
      post.remove();
      return next(null, post);
    }
  });
};

Post.getTags = function(next) {
  return Post.find().exec(function(err, posts) {
    var item, post, result, tag, tags, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
    tags = {};
    for (_i = 0, _len = posts.length; _i < _len; _i++) {
      post = posts[_i];
      _ref = post.tags;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        tag = _ref[_j];
        tag = parseTag(tag);
        for (_k = 0, _len2 = tag.length; _k < _len2; _k++) {
          item = tag[_k];
          if (tags[item] == null) {
            tags[item] = 0;
          }
          tags[item]++;
        }
      }
    }
    result = [];
    _ref1 = Object.keys(tags);
    for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
      tag = _ref1[_l];
      result.push(tag);
    }
    return next(null, result);
  });
};

Post.getArchive = function(next) {
  return Post.find().distinct('time.month').exec(next);
};

Post.addPv = function(id, next) {
  return Post.findOne({
    _id: ObjectID(id)
  }).exec(function(err, post) {
    post.pv = post.pv + 1;
    post.save();
    return next(null, post);
  });
};

getTime = function() {
  var date, time;
  date = new Date();
  time = {
    date: date,
    year: ParseDate(date).getYear(),
    month: ParseDate(date).getMonth(),
    day: ParseDate(date).getDay(),
    minutes: ParseDate(date).getMinutes(),
    seconds: ParseDate(date).getSeconds()
  };
  return time;
};

parseTag = function(tags) {
  var i;
  if (!tags) {
    return [];
  }
  tags = tags.split(',');
  for (i in tags) {
    tags[i] = tags[i].trim();
  }
  return tags;
};
